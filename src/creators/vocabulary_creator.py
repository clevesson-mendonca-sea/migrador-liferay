import logging
import traceback
import aiohttp
import json
import base64

logger = logging.getLogger(__name__)

class VocabularyCreator:
    """
    Classe respons√°vel pela cria√ß√£o de vocabul√°rios e categorias no Liferay usando APIs Headless.
    """
    
    def __init__(self, config):
        """
        Inicializa o criador de vocabul√°rios.
        
        Args:
            config: Objeto de configura√ß√£o com credenciais e URLs
        """
        self.config = config
        self.session = None
        self.base_url = f"{config.liferay_url}/o/headless-admin-taxonomy/v1.0"
        self.site_id = config.site_id
        self.vocabulary_id = None
        
    async def initialize_session(self):
        """
        Inicializa a sess√£o HTTP com autentica√ß√£o.
        """
        if self.session:
            await self.session.close()
        
        # Preparar cabe√ßalhos de autentica√ß√£o
        auth_header = base64.b64encode(
            f"{self.config.liferay_user}:{self.config.liferay_pass}".encode('utf-8')
        ).decode('utf-8')
        
        headers = {
            'Authorization': f'Basic {auth_header}',
            'Content-Type': 'application/json'
        }
        
        self.session = aiohttp.ClientSession(
            headers=headers,
            connector=aiohttp.TCPConnector(ssl=False)
        )
        
        logger.info("Sess√£o inicializada para o criador de vocabul√°rios (Headless)")
    
    async def close(self):
        """
        Fecha a sess√£o HTTP.
        """
        if self.session:
            await self.session.close()
            logger.info("Sess√£o do criador de vocabul√°rios encerrada")
    
    async def create_vocabulary(self, secretariat_name):
        """
        Cria um vocabul√°rio com o nome 'Listagem (Nome da secretaria)'.
        
        Args:
            secretariat_name: Nome da secretaria
            
        Returns:
            int: ID do vocabul√°rio criado ou None em caso de falha
        """
        vocabulary_name = f"Listagem ({secretariat_name})"
        
        try:
            # Endpoint para criar vocabul√°rio
            url = f"{self.base_url}/sites/{self.site_id}/taxonomy-vocabularies"
            
            # Dados para a requisi√ß√£o
            payload = {
                "name": vocabulary_name,
                "description": f"Categorias para a secretaria {secretariat_name}"
            }
            
            # Envia a requisi√ß√£o
            async with self.session.post(url, json=payload) as response:
                if response.status in [200, 201]:
                    result = await response.json()
                    self.vocabulary_id = result.get('id')
                    logger.info(f"‚úÖ Vocabul√°rio '{vocabulary_name}' criado com sucesso (ID: {self.vocabulary_id})")
                    return self.vocabulary_id
                elif response.status == 409:
                    # Vocabul√°rio j√° existe, buscar o existente
                    logger.info(f"‚ÑπÔ∏è Vocabul√°rio '{vocabulary_name}' j√° existe. Buscando ID...")
                    return await self._find_vocabulary_by_name(vocabulary_name)
                else:
                    error_text = await response.text()
                    logger.error(f"‚ùå Falha ao criar vocabul√°rio: {error_text}")
                    return None
        
        except Exception as e:
            logger.error(f"üö® Erro ao criar vocabul√°rio: {str(e)}")
            logger.error(traceback.format_exc())
            return None
    
    async def _find_vocabulary_by_name(self, vocabulary_name):
        """
        Busca um vocabul√°rio existente pelo nome.
        
        Args:
            vocabulary_name: Nome do vocabul√°rio a buscar
            
        Returns:
            int: ID do vocabul√°rio encontrado ou None
        """
        try:
            # Endpoint para buscar vocabul√°rios
            url = f"{self.base_url}/sites/{self.site_id}/taxonomy-vocabularies"
            
            # Par√¢metros de busca
            params = {
                'search': vocabulary_name,
                'page': 1,
                'pageSize': 1
            }
            
            # Envia a requisi√ß√£o
            async with self.session.get(url, params=params) as response:
                if response.status == 200:
                    result = await response.json()
                    items = result.get('items', [])
                    
                    if items:
                        vocabulary = items[0]
                        self.vocabulary_id = vocabulary.get('id')
                        logger.info(f"‚úÖ Vocabul√°rio encontrado (ID: {self.vocabulary_id})")
                        return self.vocabulary_id
                    
                    logger.warning(f"‚ö†Ô∏è Nenhum vocabul√°rio encontrado com o nome '{vocabulary_name}'")
                    return None
                else:
                    error_text = await response.text()
                    logger.error(f"‚ùå Falha ao buscar vocabul√°rio: {error_text}")
                    return None
        
        except Exception as e:
            logger.error(f"üö® Erro ao buscar vocabul√°rio: {str(e)}")
            logger.error(traceback.format_exc())
            return None
    
    async def create_category(self, category_name, parent_category_id=None):
        """
        Cria uma categoria no vocabul√°rio.
        
        Args:
            category_name: Nome da categoria a ser criada
            parent_category_id: ID da categoria pai (opcional)
            
        Returns:
            int: ID da categoria criada ou None em caso de falha
        """
        if not self.vocabulary_id:
            logger.error("‚ùå N√£o √© poss√≠vel criar categorias sem um vocabul√°rio")
            return None
            
        if not category_name or category_name.strip() == "-":
            logger.info("‚ÑπÔ∏è Nome de categoria inv√°lido ou vazio. Ignorando.")
            return None
        
        try:
            # Endpoint para criar categoria
            url = f"{self.base_url}/taxonomy-vocabularies/{self.vocabulary_id}/taxonomy-categories"
            
            # Preparar payload
            payload = {
                "name": category_name,
                "description": ""
            }
            
            # Adicionar categoria pai, se especificado
            if parent_category_id:
                payload['parentTaxonomyCategoryId'] = parent_category_id
            
            # Envia a requisi√ß√£o
            async with self.session.post(url, json=payload) as response:
                if response.status in [200, 201]:
                    result = await response.json()
                    category_id = result.get('id')
                    logger.info(f"‚úÖ Categoria '{category_name}' criada com sucesso (ID: {category_id})")
                    return category_id
                elif response.status == 409:
                    # Categoria j√° existe, buscar a existente
                    logger.info(f"‚ÑπÔ∏è Categoria '{category_name}' j√° existe. Buscando ID...")
                    return await self._find_category_by_name(category_name)
                else:
                    error_text = await response.text()
                    logger.error(f"‚ùå Falha ao criar categoria '{category_name}': {error_text}")
                    return None
        
        except Exception as e:
            logger.error(f"üö® Erro ao criar categoria '{category_name}': {str(e)}")
            logger.error(traceback.format_exc())
            return None
    
    async def _find_category_by_name(self, category_name):
        """
        Busca uma categoria existente pelo nome.
        
        Args:
            category_name: Nome da categoria a buscar
            
        Returns:
            int: ID da categoria encontrada ou None
        """
        try:
            # Endpoint para buscar categorias
            url = f"{self.base_url}/taxonomy-vocabularies/{self.vocabulary_id}/taxonomy-categories"
            
            # Par√¢metros de busca
            params = {
                'search': category_name,
                'page': 1,
                'pageSize': 1
            }
            
            # Envia a requisi√ß√£o
            async with self.session.get(url, params=params) as response:
                if response.status == 200:
                    result = await response.json()
                    items = result.get('items', [])
                    
                    if items:
                        category = items[0]
                        category_id = category.get('id')
                        logger.info(f"‚úÖ Categoria encontrada (ID: {category_id})")
                        return category_id
                    
                    logger.warning(f"‚ö†Ô∏è Nenhuma categoria encontrada com o nome '{category_name}'")
                    return None
                else:
                    error_text = await response.text()
                    logger.error(f"‚ùå Falha ao buscar categoria: {error_text}")
                    return None
        
        except Exception as e:
            logger.error(f"üö® Erro ao buscar categoria: {str(e)}")
            logger.error(traceback.format_exc())
            return None
        